Julian's Calendar Server
* Order 
** order/approval routes
*** TODO decline route does not work
** all order by id feature
*** DONE CREATE DB HANDLER
*** DONE CREATE ROUTE HANDLER
*** NEXT CREATE VIEW (we should have a similar template in the client side)
* Users
** TODO postUser.js
*** TODO create a handlePostUserErrors file
**** TODO handle ER_DUP_ENTRY as emailExists
***** TODO handle emailExists in client  
* Shared
** WAIT Timeslots converter to real life Timeslots
* checkout
** TODO route for /createcheckoutsession
  example sets up an endpoint using the Express framework.
// Watch this video to get started: https://youtu.be/rPR2aJ6XnAc.

const express = require('express');
const app = express();
const stripe = require('stripe')(

'sk_test_51JtgmuBfOGinzeht4b5ph01qQsqrkc2FxZtwzsQ59hDsjpPbLWb5dOyNXHOZ0Qjy1ejqbQmix6kED5WSJjzdEY8B00AoSL8eJ4'
)

app.post('/create-checkout-session', async (req, res) => {
  const session = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: [
      {
        price_data: {
          currency: 'usd',
          product_data: {
            name: 'T-shirt',
          },
          unit_amount: 2000,
        },
        quantity: 1,
      },
    ],
    mode: 'payment',
    success_url: 'https://example.com/success',
    cancel_url: 'https://example.com/cancel',
  });

  res.redirect(303, session.url);
});

app.listen(4242, () => console.log(`Listening on port ${4242}!`));
* Unassigned
** WAIT confirm/decline because of Email
** RESEARCH dynamically import all routes from the routes folder?
* Template for feature that touches DB
** Create snippet for template?
** TODO ADD TO DB schema
** TODO ADD TO SEQUELIZE schema
** TODO CREATE DB HANDLER
** TODO CREATE ROUTE HANDLER
** TODO CREATE VIEW (we should have a similar template in the client side)
* FINISHED
** Approving Users
*** DONE add "approved" status to db schema
*** DONE Create db handler for approving Users (approveUser)
*** DONE Create a route to approve Users
**** DONE add the route to routes.js
** Order Status feature
*** DONE Add order_status to the db schema
*** DONE Add to the Sequelize schema
*** DONE Figure out orderStatus types
**** [AWAITING_APPROVAL, UPCOMING, COMPLETED, CANCELED]
*** DONE create db handlers for order status changes (orderStatusByOrderIs)
** DROP Move the bcrypt stuff from the routes to a setter in the User thing